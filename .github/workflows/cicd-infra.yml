################# DEV deployment ###########################
#
# Deploys terraform config in dev/* branches to DEV env
#
#############################################################
name: Gke-Rabbit-deployment

on: 
  push:
    branches:
      - 'dev/**'
    pull_request:
    workflow_dispatch:
    inputs:
      actiondestroy:
        description: 'Excute Terraform destroy, write yes'
        required: false
        default: 'no'

 #  paths:
 #  - 'gke_tf/**'
 #  - 'worker_nodes/**' 

concurrency: 
  group: ${{ github.action == 'Gke-Rabbit-deployment' }}
  cancel-in-progress: true

jobs:
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name != 'pull_request'
    environment:
      name: DEV

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Setup GCP Service Account
        uses: google-github-actions/setup-gcloud@master
        with:
          version: 'latest'
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
          credentials_file_path: ./gcloudkey.json
          
      # Generates an execution plan for Terraform
      - name: Terraform Validate
        continue-on-error: true
        run: |
          cat /dev/null > tf_plan
          terraform fmt -recursive  -diff
          terraform fmt -recursive -check=true
          terraform init
          terraform validate

      - name: Terraform Plan
        continue-on-error: true
        run: |
          cat /dev/null > tf_plan
          terraform init
          terraform get     
          terraform plan --var-file=./environment/${{ secrets.PREFIX }}.tfvars -out "tf_plan" -input=false

      - name: Upload TF Plan
        uses: actions/upload-artifact@v2
        with:
          name: tf_plan
          path: ./tf_plan
          if-no-files-found: error
          retention-days: 1

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform_plan
    if: github.event_name == 'push'
    environment:
      name: DEV

    steps: 
    - name: Checkout
      uses: actions/checkout@master

    - name: Setup GCP Service Account
      uses: google-github-actions/setup-gcloud@master
      with:
        version: 'latest'
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        credentials_file_path: ./gcloudkey.json
        
    - name: Download TF Plan
      uses: actions/download-artifact@v2
      with:
        name: tf_plan
        path: ./

    # Provision resources via Terraform        
    - name: Terraform Apply
      run: |
        terraform init -no-color 
        terraform show "tf_plan"
        terraform apply -var-file=./environment/${{ secrets.PREFIX }}.tfvars -auto-approve -input=false
  

  rabbitmq:
    name: rabbitmq
    runs-on: ubuntu-latest
    environment:
      name: DEV
    needs: terraform_apply
    steps:    
      - name: Get vars
        if: github.event_name == 'push' 
        run: |
          CLUSTERNAME=$(grep "^name ="./environment/dev.tfvars | cut -d '"' -f2)
          CLUSTERZONE=$(grep "^zone ="./environment/dev.tfvars | cut -d '"' -f2)
          export CLUSTERNAME
          export CLUSTERZONE
          pwd
          ls -al 
          sed -e 's/ENVIRON/development/g'  -e 's/RABBITUSER/'"${{ secrets.RABBITUSER }}"'/g'  -e 's/RABBITPASS/'"${{ secrets.RABITPASS }}"'/g'  02-rabbitmqcluster.tmpl >  02-rabbitmqcluster.yaml
          ls -al 
        working-directory: ./modules/rabbitmq

      - id: get-credentials
        if:  github.event_name == 'push' 
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: ${CLUSTERNAME}
          location: ${CLUSTERZONE}
          credentials: ${{ secrets.GCP_SA_KEY }}
          use_internal_ip: true
      
      - id: get-pods
        run: kubectl get pods -A 

      - id: install-rabbitmq-operator
        run: kubectl apply -f ./modules/rabbitmq/01-cluster-operator.yml

      - id: install-rabbitmq-cluster
        run: kubectl apply -f ./modules/rabbitmq/02-rabbitmqcluster.yaml
        
      - id: get-info-after-bootstrap
         #if: github.ref == 'refs/heads/master' && github.event_name == 'push' 
        run: |
           kubectl get pods -A 
  
#  slack_notification:
#    name: 'Slack Notification'
#    runs-on: ubuntu-latest
#      environment:
#        name: dev
#    needs: [terraform_validate, terraform_apply, rabbitmq]
#    if: always()
#
#    steps:
#    - uses: actions/checkout@v2 
#
#    - name: Apply Slack Notification
#      uses: rtCamp/action-slack-notify@v2
#      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#      env:
#        SLACK_CHANNEL: Deployments-channel
#        SLACK_COLOR: ${{ needs.terraform_apply.result }}
#        SLACK_TITLE: ${{ github.repository }}
#        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
#        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#        SLACK_FOOTER: 'Terraform Github Actions Dev Branch Alert'
#    
#    - name: Plan Slack Notification
#      uses: rtCamp/action-slack-notify@v2
#      if: github.ref != 'refs/heads/main' && github.event_name == 'push'
#      env:
#        SLACK_CHANNEL: Deployments-channel
#        SLACK_COLOR: ${{ needs.terraform_validate.result }}
#        SLACK_TITLE: ${{ github.repository }}
#        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
#        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#        SLACK_FOOTER: 'Terraform Github Actions Dev Branch Push Alert'

#    - name: Plan Slack Notification
#      uses: rtCamp/action-slack-notify@v2
#      if: github.ref != 'refs/heads/main' && github.event_name == 'push'
#      env:
#        SLACK_CHANNEL: Deployments-channel
#        SLACK_COLOR: ${{ needs.rabbitmq.result }}
#        SLACK_TITLE: ${{ github.repository }}
#        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
#        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#        SLACK_FOOTER: 'Terraform Github Actions Dev Branch Push Alert'

  terraform_destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event.inputs.actiondestroy == 'yes'
    environment:
      name: DEV

    steps: 
    - name: Checkout
      uses: actions/checkout@master

    - name: Setup GCP Service Account
      uses: google-github-actions/setup-gcloud@master
      with:
        version: 'latest'
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        credentials_file_path: ./gcloudkey.json

        # destroy resources via Terraform        
    - name: Terraform Destroy
      run: |
        terraform init -no-color 
        terraform show "tf_plan"
        terraform destroy   --var-file=./environment/${{ secrets.PREFIX }}.tfvars   -auto-approve -input=false